/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */


  // PART EASY
  /*
  let todolist = [];
  const uniqueIds = new Set();

  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  const port = 3000;

  app.use(bodyParser.json());

  app.get("/todos",(req,res)=>{
    res.status(200).json(todolist);
  })

  app.get("/todos/:id",(req,res)=>{
    const todoid = parseInt(req.params.id);
    if (uniqueIds.has(todoid)) {
        const todoItem = todolist.find(obj => obj.id === todoid);
        res.status(200).json(todoItem);
    }
    else {
        res.status(404).send("NOT FOUND");
    }
  })


  app.post("/todos",(req,res)=>{
    const {title, completed,description}=req.body;
    let unvid;
    do{
      unvid= Math.floor(Math.random() * 1000000);
    }while(uniqueIds.has(unvid));

    uniqueIds.add(unvid);

    const newTodoitem = {
      id: unvid,
      title,
      completed,
      description
    }

    todolist.push(newTodoitem);
    res.status(201).json({id:unvid});
  })


  app.put("/todos/:id",(req,res)=>{
    const todoid = parseInt(req.params.id);

    if(uniqueIds.has(todoid)){
        const {title, completed} = req.body;
        const todoItem = todolist.find(obj => obj.id === todoid);
        todoItem.title=title;
        todoItem.completed=completed;
        res.status(200).send("OK");
    }
    else{
        res.status(404).send("NOT FOUND");
    }
  })


  app.delete("/todos/:id",(req,res)=>{
    const todoid = parseInt(req.params.id);
    if (uniqueIds.has(todoid)) {
        uniqueIds.delete(todoid);
        const index = todolist.findIndex(obj => obj.id === todoid);
        todolist.splice(index,1);
        res.status(200).send("OK");
    }
    else {
        res.status(404).send("NOT FOUND");
    }
  })

  app.use((req, res, next) => {
    res.status(404).send();
  });

  */


  function retreiveset(){
    const IDsdata = fs.readFileSync('unique_ids.json', 'utf8');
    const IDsarray = JSON.parse(IDsdata);
    const setfromarray = new Set(IDsarray);
    return setfromarray;
  }

  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');

  const app = express();
  const port = 3000;

  app.use(bodyParser.json());

  app.get("/todos",(req,res)=>{

    fs.readFile("todos.json", "utf-8", (err,data)=>{
      if(err) {
        throw err;
      }
      const todolist = JSON.parse(data);
      res.status(200).send(todolist);
    })

  })

  app.get("/todos/:id",(req,res)=>{
    const todoid = parseInt(req.params.id);
    const uniqueIds = retreiveset();

    if (uniqueIds.has(todoid)) {

      fs.readFile("todos.json", "utf-8", (err,data)=>{
        if(err) {
          throw err;
        }
        const todolist = JSON.parse(data);
        const todoItem = todolist.find(obj => obj.id === todoid);
        res.status(200).json(todoItem);
      })
        
    }
    else {
        res.status(404).send("NOT FOUND");
    }
  })


  app.post("/todos",(req,res)=>{
    const {title, completed,description}=req.body;

    const uniqueIds = retreiveset();
    let unvid;
    do{
      unvid= Math.floor(Math.random() * 1000000);
    }while(uniqueIds.has(unvid));
    uniqueIds.add(unvid);

    const newTodoitem = {
      id: unvid,
      title,
      completed,
      description
    }
    fs.readFile("todos.json", "utf-8", (err,data)=>{

      if(err) {
        throw err;
      }
      const todolist = JSON.parse(data);
      todolist.push(newTodoitem);
      fs.writeFile("todos.json", JSON.stringify(todolist), "utf-8",(err) => {
        if (err) throw err;
        res.status(201).json({id:unvid});
      });
    
    })

    const arrayofIds = Array.from(uniqueIds);
    const jsonDataofIds = JSON.stringify(arrayofIds);
    fs.writeFile('unique_ids.json', jsonDataofIds, "utf-8", (err) =>{});

  })


  app.put("/todos/:id",(req,res)=>{
    const todoid = parseInt(req.params.id);

    const uniqueIds = retreiveset();

    if(uniqueIds.has(todoid)){
        const {title, completed} = req.body;

        fs.readFile("todos.json", "utf-8", (err,data)=>{
          if(err) {
            throw err;
          }
          const todolist = JSON.parse(data);
          const todoItem = todolist.find(obj => obj.id === todoid);
          todoItem.title=title;
          todoItem.completed=completed;
          fs.writeFile("todos.json", JSON.stringify(todolist), "utf-8",(err) => {
            if (err) throw err;
            res.status(200).send("OK");
          });
        })
  
    }
    else{
        res.status(404).send("NOT FOUND");
    }
  })


  app.delete("/todos/:id",(req,res)=>{
    const todoid = parseInt(req.params.id);

    const uniqueIds = retreiveset();

    if (uniqueIds.has(todoid)) {
        uniqueIds.delete(todoid);

        fs.readFile("todos.json", "utf-8", (err,data)=>{
          if(err) {
            throw err;
          }
          const todolist = JSON.parse(data);
          const index = todolist.findIndex(obj => obj.id === todoid);
          todolist.splice(index,1);
          fs.writeFile("todos.json", JSON.stringify(todolist), "utf-8",(err) => {
            if (err) throw err;
            res.status(200).send("OK");
          });
        })

        const arrayofIds = Array.from(uniqueIds);
        const jsonDataofIds = JSON.stringify(arrayofIds);
        fs.writeFile('unique_ids.json', jsonDataofIds, "utf-8", (err) =>{});
    }
    else {
        res.status(404).send("NOT FOUND");
    }
  })

  app.use((req, res, next) => {
    res.status(404).send();
  });
  
  module.exports = app;
